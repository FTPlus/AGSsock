name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        if [ "$RUNNER_OS" == "Linux" ]  || [ "$RUNNER_OS" == "macOS" ]; then
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        elif [ "$RUNNER_OS" == "Windows" ]; then
          cmake -S $GITHUB_WORKSPACE -B . -G "Visual Studio 16 2019" -A Win32 
        else
          echo "$RUNNER_OS not supported"
          exit 1
        fi

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        if [ "$RUNNER_OS" == "Linux" ]  || [ "$RUNNER_OS" == "macOS" ]; then
          cmake --build . --config $BUILD_TYPE
        elif [ "$RUNNER_OS" == "Windows" ]; then
          cmake --build . --config Debug
        else
          echo "$RUNNER_OS not supported"
          exit 1
        fi      

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        if [ "$RUNNER_OS" == "Linux" ]  || [ "$RUNNER_OS" == "macOS" ]; then
           ctest -C $BUILD_TYPE
        elif [ "$RUNNER_OS" == "Windows" ]; then
           ctest -C Debug
        else
          echo "$RUNNER_OS not supported"
          exit 1
        fi

    - uses: actions/upload-artifact@v2
      with:
        name: Upload Artifact
        path: |
          ${{runner.workspace}}/build/Debug/*.dll
          ${{runner.workspace}}/build/Release/*.dll
          ${{runner.workspace}}/build/*.so
          ${{runner.workspace}}/build/*.dylib
